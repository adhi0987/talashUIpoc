{"ast":null,"code":"import { Observable } from 'rxjs';\nimport 'rxjs/add/operator/filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nwindow.global = window;\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.ssoAuthComplete$ = new Observable(obs => this.observer = obs);\n  }\n  // public login(): void {\n  //   this.auth0.authorize();\n  // }\n  // public handleAuthentication(): void {\n  //   this.auth0.parseHash((err, authResult) => {\n  //     if (authResult && authResult.accessToken && authResult.idToken) {\n  //       this.setSession(authResult);\n  //       this.router.navigate(['/']);\n  //     } else if (err) {\n  //       this.router.navigate(['/']);\n  //       console.log(err);\n  //       alert(`Error: ${err.error}. Check the console for further details.`);\n  //     }\n  //   });\n  // }\n  // public getProfile(cb: { (err: any, profile: any): void; (arg0: any, arg1: any): void; }): void {\n  //   const accessToken = localStorage.getItem('access_token');\n  //   if (!accessToken) {\n  //     throw new Error('Access token must exist to fetch profile');\n  //   }\n  //   const self = this;\n  //   this.auth0.client.userInfo(accessToken, (err: any, profile: any) => {\n  //     if (profile) {\n  //       self.userProfile = profile;\n  //     }\n  //     cb(err, profile);\n  //   });\n  // }\n  // private setSession(authResult: { expiresIn: number; accessToken: string; idToken: string; }): void {\n  //   // Set the time that the access token will expire at\n  //   const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n  //   localStorage.setItem('access_token', authResult.accessToken);\n  //   localStorage.setItem('id_token', authResult.idToken);\n  //   localStorage.setItem('expires_at', expiresAt);\n  // }\n  // public logout(): void {\n  //   // Remove tokens and expiry time from localStorage\n  //   localStorage.removeItem('access_token');\n  //   localStorage.removeItem('id_token');\n  //   localStorage.removeItem('expires_at');\n  //   // Go back to the home route\n  //   this.router.navigate(['/']);\n  // }\n  // public isAuthenticated(): boolean {\n  //   // Check whether the current time is past the\n  //   // access token's expiry time\n  //   const expiresAt = JSON.parse(localStorage.getItem('expires_at') || '{}');\n  //   return new Date().getTime() < expiresAt;\n  // }\n  // public renewToken() {\n  //   this.auth0.checkSession({},\n  //     (err, result) => {\n  //       if (err) {\n  //         alert(\n  //           `Could not get a new token (${err.error}: ${err.error_description}).`\n  //         );\n  //         this.login();\n  //       } else {\n  //         this.setSession(result);\n  //         this.observer.next(true);\n  //       }\n  //     }\n  //   );\n  // }\n  //public scheduleRenewal() {\n  //  if (!this.isAuthenticated()) return;\n  //  this.unscheduleRenewal();\n  //  const expiresAt = JSON.parse(window.localStorage.getItem('expires_at'));\n  //  const source = Observable.of(expiresAt).flatMap(expiresAt => {\n  //    const now = Date.now();\n  //    // Use the delay in a timer to\n  //    // run the refresh at the proper time\n  //    return Observable.timer(Math.max(1, expiresAt - now));\n  //  });\n  //  // Once the delay time from above is\n  //  // reached, get a new JWT and schedule\n  //  // additional refreshes\n  //  this.refreshSubscription = source.subscribe(() => {\n  //    this.renewToken();\n  //    this.scheduleRenewal();\n  //  });\n  //}\n  unscheduleRenewal() {\n    if (!this.refreshSubscription) return;\n    this.refreshSubscription.unsubscribe();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAkB,MAAM;AAC3C,OAAO,0BAA0B;;;AAGhCC,MAAc,CAACC,MAAM,GAAGD,MAAM;AAG/B,OAAM,MAAOE,WAAW;EAkBtBC,YAAmBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAJzB,qBAAgB,GAAwB,IAAIL,UAAU,CACpDM,GAAG,IAAK,IAAI,CAACC,QAAQ,GAAGD,GAAI,CAC7B;EAEoC;EAErC;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EAEA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEOE,iBAAiB;IACtB,IAAI,CAAC,IAAI,CAACC,mBAAmB,EAAE;IAC/B,IAAI,CAACA,mBAAmB,CAACC,WAAW,EAAE;EACxC;;AAvHWP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;AAAA","names":["Observable","window","global","AuthService","constructor","router","obs","observer","unscheduleRenewal","refreshSubscription","unsubscribe","factory"],"sourceRoot":"","sources":["C:\\Tal\\Analysis\\ShareGoodVibe\\ShareGoodVibe\\ClientApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport { Router } from '@angular/router';\nimport { Observable, Observer } from 'rxjs';\nimport 'rxjs/add/operator/filter';\n\n\n(window as any).global = window;\n\n@Injectable()\nexport class AuthService {\n\n  // auth0 = new auth0.WebAuth({\n  //   clientID: AUTH_CONFIG.clientID,\n  //   domain: AUTH_CONFIG.domain,\n  //   responseType: 'token id_token',\n  //   audience: AUTH_CONFIG.apiUrl,\n  //   redirectUri: AUTH_CONFIG.callbackURL,\n  //   scope: 'openid profile email read:messages'\n  // });\n\n  userProfile: any;\n  refreshSubscription: any;\n  observer!: Observer<boolean>;\n  ssoAuthComplete$: Observable<boolean> = new Observable(\n    obs => (this.observer = obs)\n  );\n\n  constructor(public router: Router) { }\n\n  // public login(): void {\n  //   this.auth0.authorize();\n  // }\n\n  // public handleAuthentication(): void {\n  //   this.auth0.parseHash((err, authResult) => {\n  //     if (authResult && authResult.accessToken && authResult.idToken) {\n  //       this.setSession(authResult);\n  //       this.router.navigate(['/']);\n  //     } else if (err) {\n  //       this.router.navigate(['/']);\n  //       console.log(err);\n  //       alert(`Error: ${err.error}. Check the console for further details.`);\n  //     }\n  //   });\n  // }\n\n  // public getProfile(cb: { (err: any, profile: any): void; (arg0: any, arg1: any): void; }): void {\n  //   const accessToken = localStorage.getItem('access_token');\n  //   if (!accessToken) {\n  //     throw new Error('Access token must exist to fetch profile');\n  //   }\n\n  //   const self = this;\n  //   this.auth0.client.userInfo(accessToken, (err: any, profile: any) => {\n  //     if (profile) {\n  //       self.userProfile = profile;\n  //     }\n  //     cb(err, profile);\n  //   });\n  // }\n\n  // private setSession(authResult: { expiresIn: number; accessToken: string; idToken: string; }): void {\n  //   // Set the time that the access token will expire at\n  //   const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n  //   localStorage.setItem('access_token', authResult.accessToken);\n  //   localStorage.setItem('id_token', authResult.idToken);\n  //   localStorage.setItem('expires_at', expiresAt);\n  // }\n\n  // public logout(): void {\n  //   // Remove tokens and expiry time from localStorage\n  //   localStorage.removeItem('access_token');\n  //   localStorage.removeItem('id_token');\n  //   localStorage.removeItem('expires_at');\n  //   // Go back to the home route\n  //   this.router.navigate(['/']);\n  // }\n\n  // public isAuthenticated(): boolean {\n  //   // Check whether the current time is past the\n  //   // access token's expiry time\n  //   const expiresAt = JSON.parse(localStorage.getItem('expires_at') || '{}');\n  //   return new Date().getTime() < expiresAt;\n  // }\n\n\n  // public renewToken() {\n  //   this.auth0.checkSession({},\n  //     (err, result) => {\n  //       if (err) {\n  //         alert(\n  //           `Could not get a new token (${err.error}: ${err.error_description}).`\n  //         );\n  //         this.login();\n  //       } else {\n  //         this.setSession(result);\n  //         this.observer.next(true);\n  //       }\n  //     }\n  //   );\n  // }\n\n  //public scheduleRenewal() {\n  //  if (!this.isAuthenticated()) return;\n  //  this.unscheduleRenewal();\n\n  //  const expiresAt = JSON.parse(window.localStorage.getItem('expires_at'));\n\n  //  const source = Observable.of(expiresAt).flatMap(expiresAt => {\n  //    const now = Date.now();\n\n  //    // Use the delay in a timer to\n  //    // run the refresh at the proper time\n  //    return Observable.timer(Math.max(1, expiresAt - now));\n  //  });\n\n  //  // Once the delay time from above is\n  //  // reached, get a new JWT and schedule\n  //  // additional refreshes\n  //  this.refreshSubscription = source.subscribe(() => {\n  //    this.renewToken();\n  //    this.scheduleRenewal();\n  //  });\n  //}\n\n  public unscheduleRenewal() {\n    if (!this.refreshSubscription) return;\n    this.refreshSubscription.unsubscribe();\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}