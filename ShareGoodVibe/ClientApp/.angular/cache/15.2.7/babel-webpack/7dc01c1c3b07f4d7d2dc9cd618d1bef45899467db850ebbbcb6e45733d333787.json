{"ast":null,"code":"import { EventEmitter, PLATFORM_ID, TemplateRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction NguiInViewComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template);\n  }\n}\nexport class NguiInViewComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n    this.inView = false;\n    this.once50PctVisible = false;\n    this.options = {\n      threshold: [.1, .2, .3, .4, .5, .6, .7, .8]\n    };\n    this.inView$ = new EventEmitter();\n    this.notInView$ = new EventEmitter();\n  }\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.observer = new IntersectionObserver(this.handleIntersect.bind(this), this.options);\n      this.observer.observe(this.element.nativeElement);\n    }\n  }\n  ngOnDestroy() {\n    this.observer.disconnect();\n  }\n  handleIntersect(entries, observer) {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        this.inView = true;\n        this.inView$.emit(entry);\n      } else {\n        this.notInView$.emit(entry);\n      }\n    });\n  }\n}\nNguiInViewComponent.ɵfac = function NguiInViewComponent_Factory(t) {\n  return new (t || NguiInViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nNguiInViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NguiInViewComponent,\n  selectors: [[\"ngui-in-view\"]],\n  contentQueries: function NguiInViewComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, TemplateRef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  outputs: {\n    inView$: \"inView\",\n    notInView$: \"notInView\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n  template: function NguiInViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NguiInViewComponent_ng_container_0_Template, 1, 1, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.inView);\n    }\n  },\n  dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n  styles: [\"[_nghost-%COMP%] {display: block;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmd1aS1pbi12aWV3L25ndWktaW4tdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7ZGlzcGxheTogYmxvY2s7fSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAAA,SAIIA,YAAY,EAMZC,WAAW,EAEXC,WAAW,QAER,eAAe;AAEtB,SAASC,iBAAiB,QAAQ,iBAAiB;;;;;IAK/CC,2BACe;;;;IADcA,kDAA6B;;;AAK9D,OAAM,MAAOC,mBAAmB;EAW5BC,YACWC,OAAmB,EACnBC,QAAmB,EACGC,UAAe;IAFrC,YAAO,GAAPF,OAAO;IACP,aAAQ,GAARC,QAAQ;IACc,eAAU,GAAVC,UAAU;IAZ3C,WAAM,GAAY,KAAK;IACvB,qBAAgB,GAAY,KAAK;IAIxB,YAAO,GAAQ;MAAEC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAAC,CAAE;IACrD,YAAO,GAAsB,IAAIV,YAAY,EAAE;IAC5C,eAAU,GAAsB,IAAIA,YAAY,EAAE;EAKnB;EAEpDW,QAAQ;IACJ,IAAIR,iBAAiB,CAAC,IAAI,CAACM,UAAU,CAAC,EAAE;MACpC,IAAI,CAACG,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,OAAO,CAAC;MACvF,IAAI,CAACJ,QAAQ,CAACK,OAAO,CAAC,IAAI,CAACV,OAAO,CAACW,aAAa,CAAC;;EAEzD;EAEAC,WAAW;IACP,IAAI,CAACP,QAAQ,CAACQ,UAAU,EAAE;EAC9B;EAEAN,eAAe,CAACO,OAAoC,EAAET,QAAa;IAC/DS,OAAO,CAACC,OAAO,CAAEC,KAAgC,IAAI;MACjD,IAAIA,KAAK,CAACC,cAAc,EAAE;QACtB,IAAI,CAACC,MAAM,GAAG,IAAI;QAClB,IAAI,CAACC,OAAO,CAACC,IAAI,CAACJ,KAAK,CAAC;OAC3B,MAAM;QACH,IAAI,CAACK,UAAU,CAACD,IAAI,CAACJ,KAAK,CAAC;;IAEnC,CAAC,CAAC;EACN;;AApCSlB,mBAAmB;mBAAnBA,mBAAmB,gGAchBJ,WAAW;AAAA;AAddI,mBAAmB;QAAnBA,mBAAmB;EAAAwB;EAAAC;IAAA;kCAKd5B,WAAW;;;;;;;;;;;;;;;;;;;MAVzBE,sFACe;;;MADAA,iCAAY","names":["EventEmitter","PLATFORM_ID","TemplateRef","isPlatformBrowser","i0","NguiInViewComponent","constructor","element","renderer","platformId","threshold","ngOnInit","observer","IntersectionObserver","handleIntersect","bind","options","observe","nativeElement","ngOnDestroy","disconnect","entries","forEach","entry","isIntersecting","inView","inView$","emit","notInView$","selectors","contentQueries"],"sourceRoot":"","sources":["C:\\Tal\\Analysis\\ShareGoodVibe\\ShareGoodVibe\\ClientApp\\src\\app\\ngui-in-view\\ngui-in-view.component.ts"],"sourcesContent":["import {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    PLATFORM_ID,\n    Renderer2,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\n\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n    selector: 'ngui-in-view',\n    template: `\n    <ng-container *ngIf=\"inView\" [ngTemplateOutlet]=\"template\">\n    </ng-container>\n  `,\n    styles: [':host {display: block;}']\n})\nexport class NguiInViewComponent implements OnInit, OnDestroy {\n    observer!: IntersectionObserver;\n    inView: boolean = false;\n    once50PctVisible: boolean = false;\n\n    @ContentChild(TemplateRef)\n    template!: TemplateRef<any>;\n    @Input() options: any = { threshold: [.1, .2, .3, .4, .5, .6, .7, .8] };\n    @Output('inView') inView$: EventEmitter<any> = new EventEmitter();\n    @Output('notInView') notInView$: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        public element: ElementRef,\n        public renderer: Renderer2,\n        @Inject(PLATFORM_ID) private platformId: any) { }\n\n    ngOnInit(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            this.observer = new IntersectionObserver(this.handleIntersect.bind(this), this.options);\n            this.observer.observe(this.element.nativeElement);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.observer.disconnect();\n    }\n\n    handleIntersect(entries: IntersectionObserverEntry[], observer: any): void {\n        entries.forEach((entry: IntersectionObserverEntry) => {\n            if (entry.isIntersecting) {\n                this.inView = true;\n                this.inView$.emit(entry);\n            } else {\n                this.notInView$.emit(entry);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}