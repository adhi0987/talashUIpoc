{"ast":null,"code":"import { of } from 'rxjs';\nimport { CHARACTERS } from './mock-data';\nimport { CHARACTERS1 } from './mock-data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdventureTimeService {\n  constructor(http, baseUrl) {\n    this.data = [];\n    this.videoids = [];\n    this.videoids1 = [];\n    this.CHARACTERS = [];\n    this.CHARACTERS1 = [];\n    this.http = http;\n    http.get(baseUrl + 'weatherforecast/GetUserData?input=rise').subscribe(result => {\n      this.data = result;\n      console.log(this.data);\n      this.data.forEach(function (element) {\n        CHARACTERS.push(element);\n      });\n      CHARACTERS.push(this.data[0]);\n    }, error => console.error(error));\n  }\n  getCharacters() {\n    var url = \"/weatherforecast/GetUserData?input=\" + \"live\";\n    this.http.get(url).subscribe(result => {\n      // return result;\n      this.data = result;\n      console.log(this.data);\n      this.data.forEach(function (element) {\n        CHARACTERS.push(element);\n      });\n      CHARACTERS.push(this.data[0]);\n    }, error => console.error(error));\n    return of(CHARACTERS);\n  }\n  getColumns() {\n    return [\"name\", \"age\", \"species\", \"occupation\", \"info1\", \"info2\"];\n  }\n  //delete content \n  Updateclicks(str) {\n    var url = \"/data/Updateclicks?input=\" + str;\n    this.http.get(url).subscribe(result => {\n      console.log(\"deleted content\");\n    });\n  }\n  GetFavourites(str) {\n    var url = \"/data/GetFavourites?userid=\" + str;\n    while (CHARACTERS1.length > 0) {\n      CHARACTERS1.pop();\n    }\n    this.http.get(url).subscribe(result => {\n      this.data = result;\n      console.log(this.data);\n      this.data.forEach(function (element) {\n        CHARACTERS1.push(element);\n      });\n      CHARACTERS1.push(this.data[0]);\n    }, error => console.error(error));\n    return of(CHARACTERS1);\n  }\n  //video data ..\n  getVideodata(searchword) {\n    var url = \"/data/GetVideolist?input=\" + searchword;\n    this.http.get(url).subscribe(result => {\n      this.videoids = result;\n      this.videoids1 = this.videoids[0];\n      console.log(this.videoids1);\n      console.log(\"getVideodata\");\n    }, error => console.error(error));\n    return this.videoids1;\n  }\n  getvideodata1(searchword) {\n    var url = \"/data/GetVideolist?input=\" + searchword;\n    return this.http.get(url).pipe(product => this.videoids3 = product);\n  }\n}\nAdventureTimeService.ɵfac = function AdventureTimeService_Factory(t) {\n  return new (t || AdventureTimeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAdventureTimeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdventureTimeService,\n  factory: AdventureTimeService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["of","CHARACTERS","CHARACTERS1","AdventureTimeService","constructor","http","baseUrl","get","subscribe","result","data","console","log","forEach","element","push","error","getCharacters","url","getColumns","Updateclicks","str","GetFavourites","length","pop","getVideodata","searchword","videoids","videoids1","getvideodata1","pipe","product","videoids3","factory"],"sourceRoot":"","sources":["C:\\Tal\\Analysis\\ShareGoodVibe\\ShareGoodVibe\\ClientApp\\src\\app\\services\\adventure-time.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { Observable, of  } from 'rxjs';\n\n\nimport { HttpClient } from '@angular/common/http'\nimport { CHARACTERS } from './mock-data';\nimport { CHARACTERS1 } from './mock-data';\nimport { concat } from 'rxjs';\n\n\n@Injectable()\nexport class AdventureTimeService {\n\n    public http: HttpClient;\n    public data: WeatherForecast[] = [];\n    public videoids: any[] = [];\n    public videoids3!: Observable<any[]>;\n\n    public videoids1: string[]=[];\n    public CHARACTERS: any[] = [];\n    public CHARACTERS1: any[] = [];\n    constructor(http: HttpClient , @Inject('BASE_URL') baseUrl: string) {\n        this.http = http;\n        http.get < WeatherForecast[]>(baseUrl+'weatherforecast/GetUserData?input=rise').subscribe\n            (\n            result => {\n                this.data = result; \n                console.log(this.data);\n                this.data.forEach(function (element) {\n                    CHARACTERS.push(element);\n                });\n                \n                CHARACTERS.push(this.data[0]);\n            }, error => console.error(error));\n    \n    }\n\n    getCharacters(): Observable<WeatherForecast[]>{\n        var url = \"/weatherforecast/GetUserData?input=\" +\"live\";\n\n        this.http.get<WeatherForecast[]>(url).subscribe\n            (\n            result => {\n               // return result;\n                this.data = result;\n                console.log(this.data);\n                this.data.forEach(function (element) {\n                    CHARACTERS.push(element);\n                });\n\n                CHARACTERS.push(this.data[0]);\n            }, error => console.error(error));\n        return of(CHARACTERS);\n  }\n\n  getColumns(): string[]{\n    return [\"name\", \"age\", \"species\", \"occupation\",\"info1\",\"info2\"]\n  }\n   //delete content \n\n   Updateclicks(str: string)\n   {\n       var url = \"/data/Updateclicks?input=\" + str;\n            this.http.get(url).subscribe\n            ( result => {\n                console.log(\"deleted content\"); \n                  });\n   }\n    GetFavourites(str: string): Observable<WeatherForecast[]> {\n        var url = \"/data/GetFavourites?userid=\" + str;\n        while (CHARACTERS1.length > 0) {\n            CHARACTERS1.pop();\n        }\n        this.http.get<WeatherForecast[]>(url).subscribe\n            (\n                result => {\n                    this.data = result;\n                    console.log(this.data);\n                    this.data.forEach(function (element) {\n                        CHARACTERS1.push(element);\n                    });\n\n                    CHARACTERS1.push(this.data[0]);\n                }, error => console.error(error));\n        return of(CHARACTERS1);\n        \n    }\n\n  //video data ..\n\n    getVideodata(searchword: string): string[] {\n        var url = \"/data/GetVideolist?input=\" + searchword;\n\n        this.http.get<WeatherForecast1[]>(url).subscribe\n            (\n            result => {\n                this.videoids = <WeatherForecast1[]>result;\n               \n                this.videoids1 = this.videoids[0];\n\n                console.log(this.videoids1);\n                console.log(\"getVideodata\");\n                \n            }, error => console.error(error));\n        \n        return this.videoids1;\n    }\n    getvideodata1(searchword: string): Observable<any[]> {\n        var url = \"/data/GetVideolist?input=\" + searchword;\n\n        return this.http.get<any[]>(url)\n            .pipe(\n                product => this.videoids3 = product \n           \n\n               \n            );\n    }\n}\n\ninterface WeatherForecast {\n    name: string;\n    age: string ;\n    species: number;\n    occupation: string;\n}\ninterface WeatherForecast1 {\n    name: string;\n   \n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}