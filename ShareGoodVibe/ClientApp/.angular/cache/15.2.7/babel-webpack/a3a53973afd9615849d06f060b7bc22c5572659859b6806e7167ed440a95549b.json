{"ast":null,"code":"import { AUTH_CONFIG } from './auth0-variables';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nwindow;\nglobal = window;\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.auth0 = new auth0.WebAuth({\n      clientID: AUTH_CONFIG.clientID,\n      domain: AUTH_CONFIG.domain,\n      responseType: 'token id_token',\n      audience: AUTH_CONFIG.apiUrl,\n      redirectUri: AUTH_CONFIG.callbackURL,\n      scope: 'openid profile email read:messages'\n    });\n    this.ssoAuthComplete$ = new Observable(obs => this.observer = obs);\n  }\n  login() {\n    this.auth0.authorize();\n  }\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        this.router.navigate(['/']);\n      } else if (err) {\n        this.router.navigate(['/']);\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n  getProfile(cb) {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      throw new Error('Access token must exist to fetch profile');\n    }\n    const self = this;\n    this.auth0.client.userInfo(accessToken, (err, profile) => {\n      if (profile) {\n        self.userProfile = profile;\n      }\n      cb(err, profile);\n    });\n  }\n  setSession(authResult) {\n    // Set the time that the access token will expire at\n    const expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n  }\n  logout() {\n    // Remove tokens and expiry time from localStorage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // Go back to the home route\n    this.router.navigate(['/']);\n  }\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at') || '{}');\n    return new Date().getTime() < expiresAt;\n  }\n  renewToken() {\n    this.auth0.checkSession({}, (err, result) => {\n      if (err) {\n        alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n        this.login();\n      } else {\n        this.setSession(result);\n        this.observer.next(true);\n      }\n    });\n  }\n  //public scheduleRenewal() {\n  //  if (!this.isAuthenticated()) return;\n  //  this.unscheduleRenewal();\n  //  const expiresAt = JSON.parse(window.localStorage.getItem('expires_at'));\n  //  const source = Observable.of(expiresAt).flatMap(expiresAt => {\n  //    const now = Date.now();\n  //    // Use the delay in a timer to\n  //    // run the refresh at the proper time\n  //    return Observable.timer(Math.max(1, expiresAt - now));\n  //  });\n  //  // Once the delay time from above is\n  //  // reached, get a new JWT and schedule\n  //  // additional refreshes\n  //  this.refreshSubscription = source.subscribe(() => {\n  //    this.renewToken();\n  //    this.scheduleRenewal();\n  //  });\n  //}\n  unscheduleRenewal() {\n    if (!this.refreshSubscription) return;\n    this.refreshSubscription.unsubscribe();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,mBAAmB;AAE/C,SAASC,UAAU,QAAkB,MAAM;AAC3C,OAAO,0BAA0B;;;AACjCC,MAAa;AAAEC,MAAM,GAAGD,MAAM;AAG9B,OAAM,MAAOE,WAAW;EAkBtBC,YAAmBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAhBzB,UAAK,GAAG,IAAIC,KAAK,CAACC,OAAO,CAAC;MACxBC,QAAQ,EAAET,WAAW,CAACS,QAAQ;MAC9BC,MAAM,EAAEV,WAAW,CAACU,MAAM;MAC1BC,YAAY,EAAE,gBAAgB;MAC9BC,QAAQ,EAAEZ,WAAW,CAACa,MAAM;MAC5BC,WAAW,EAAEd,WAAW,CAACe,WAAW;MACpCC,KAAK,EAAE;KACR,CAAC;IAKF,qBAAgB,GAAwB,IAAIf,UAAU,CACpDgB,GAAG,IAAK,IAAI,CAACC,QAAQ,GAAGD,GAAI,CAC7B;EAEoC;EAE9BE,KAAK;IACV,IAAI,CAACZ,KAAK,CAACa,SAAS,EAAE;EACxB;EAEOC,oBAAoB;IACzB,IAAI,CAACd,KAAK,CAACe,SAAS,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAI;MACvC,IAAIA,UAAU,IAAIA,UAAU,CAACC,WAAW,IAAID,UAAU,CAACE,OAAO,EAAE;QAC9D,IAAI,CAACC,UAAU,CAACH,UAAU,CAAC;QAC3B,IAAI,CAAClB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;OAC5B,MAAM,IAAIL,GAAG,EAAE;QACd,IAAI,CAACjB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3BC,OAAO,CAACC,GAAG,CAACP,GAAG,CAAC;QAChBQ,KAAK,CAAC,UAAUR,GAAG,CAACS,KAAK,0CAA0C,CAAC;;IAExE,CAAC,CAAC;EACJ;EAEOC,UAAU,CAACC,EAAqE;IACrF,MAAMT,WAAW,GAAGU,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACxD,IAAI,CAACX,WAAW,EAAE;MAChB,MAAM,IAAIY,KAAK,CAAC,0CAA0C,CAAC;;IAG7D,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAI,CAAC/B,KAAK,CAACgC,MAAM,CAACC,QAAQ,CAACf,WAAW,EAAE,CAACF,GAAQ,EAAEkB,OAAY,KAAI;MACjE,IAAIA,OAAO,EAAE;QACXH,IAAI,CAACI,WAAW,GAAGD,OAAO;;MAE5BP,EAAE,CAACX,GAAG,EAAEkB,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ;EAEQd,UAAU,CAACH,UAAwE;IACzF;IACA,MAAMmB,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAErB,UAAU,CAACsB,SAAS,GAAG,IAAI,GAAI,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CAAC;IACtFb,YAAY,CAACc,OAAO,CAAC,cAAc,EAAEzB,UAAU,CAACC,WAAW,CAAC;IAC5DU,YAAY,CAACc,OAAO,CAAC,UAAU,EAAEzB,UAAU,CAACE,OAAO,CAAC;IACpDS,YAAY,CAACc,OAAO,CAAC,YAAY,EAAEN,SAAS,CAAC;EAC/C;EAEOO,MAAM;IACX;IACAf,YAAY,CAACgB,UAAU,CAAC,cAAc,CAAC;IACvChB,YAAY,CAACgB,UAAU,CAAC,UAAU,CAAC;IACnChB,YAAY,CAACgB,UAAU,CAAC,YAAY,CAAC;IACrC;IACA,IAAI,CAAC7C,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEOwB,eAAe;IACpB;IACA;IACA,MAAMT,SAAS,GAAGC,IAAI,CAACS,KAAK,CAAClB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;IACxE,OAAO,IAAIW,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGL,SAAS;EACzC;EAGOW,UAAU;IACf,IAAI,CAAC/C,KAAK,CAACgD,YAAY,CAAC,EAAE,EACxB,CAAChC,GAAG,EAAEiC,MAAM,KAAI;MACd,IAAIjC,GAAG,EAAE;QACPQ,KAAK,CACH,8BAA8BR,GAAG,CAACS,KAAK,KAAKT,GAAG,CAACkC,iBAAiB,IAAI,CACtE;QACD,IAAI,CAACtC,KAAK,EAAE;OACb,MAAM;QACL,IAAI,CAACQ,UAAU,CAAC6B,MAAM,CAAC;QACvB,IAAI,CAACtC,QAAQ,CAACwC,IAAI,CAAC,IAAI,CAAC;;IAE5B,CAAC,CACF;EACH;EAEA;EACA;EACA;EAEA;EAEA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEOC,iBAAiB;IACtB,IAAI,CAAC,IAAI,CAACC,mBAAmB,EAAE;IAC/B,IAAI,CAACA,mBAAmB,CAACC,WAAW,EAAE;EACxC;;AAvHWzD,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0D,SAAX1D,WAAW;AAAA","names":["AUTH_CONFIG","Observable","window","global","AuthService","constructor","router","auth0","WebAuth","clientID","domain","responseType","audience","apiUrl","redirectUri","callbackURL","scope","obs","observer","login","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","navigate","console","log","alert","error","getProfile","cb","localStorage","getItem","Error","self","client","userInfo","profile","userProfile","expiresAt","JSON","stringify","expiresIn","Date","getTime","setItem","logout","removeItem","isAuthenticated","parse","renewToken","checkSession","result","error_description","next","unscheduleRenewal","refreshSubscription","unsubscribe","factory"],"sourceRoot":"","sources":["C:\\Tal\\Analysis\\ShareGoodVibe\\ShareGoodVibe\\ClientApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport { Router } from '@angular/router';\nimport { Observable, Observer } from 'rxjs';\nimport 'rxjs/add/operator/filter';\nwindow as any).global = window;\n\n@Injectable()\nexport class AuthService {\n\n  auth0 = new auth0.WebAuth({\n    clientID: AUTH_CONFIG.clientID,\n    domain: AUTH_CONFIG.domain,\n    responseType: 'token id_token',\n    audience: AUTH_CONFIG.apiUrl,\n    redirectUri: AUTH_CONFIG.callbackURL,\n    scope: 'openid profile email read:messages'\n  });\n\n  userProfile: any;\n  refreshSubscription: any;\n  observer: Observer<boolean>;\n  ssoAuthComplete$: Observable<boolean> = new Observable(\n    obs => (this.observer = obs)\n  );\n\n  constructor(public router: Router) { }\n\n  public login(): void {\n    this.auth0.authorize();\n  }\n\n  public handleAuthentication(): void {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n        this.router.navigate(['/']);\n      } else if (err) {\n        this.router.navigate(['/']);\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  public getProfile(cb: { (err: any, profile: any): void; (arg0: any, arg1: any): void; }): void {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      throw new Error('Access token must exist to fetch profile');\n    }\n\n    const self = this;\n    this.auth0.client.userInfo(accessToken, (err: any, profile: any) => {\n      if (profile) {\n        self.userProfile = profile;\n      }\n      cb(err, profile);\n    });\n  }\n\n  private setSession(authResult: { expiresIn: number; accessToken: string; idToken: string; }): void {\n    // Set the time that the access token will expire at\n    const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n  }\n\n  public logout(): void {\n    // Remove tokens and expiry time from localStorage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // Go back to the home route\n    this.router.navigate(['/']);\n  }\n\n  public isAuthenticated(): boolean {\n    // Check whether the current time is past the\n    // access token's expiry time\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at') || '{}');\n    return new Date().getTime() < expiresAt;\n  }\n\n\n  public renewToken() {\n    this.auth0.checkSession({},\n      (err, result) => {\n        if (err) {\n          alert(\n            `Could not get a new token (${err.error}: ${err.error_description}).`\n          );\n          this.login();\n        } else {\n          this.setSession(result);\n          this.observer.next(true);\n        }\n      }\n    );\n  }\n\n  //public scheduleRenewal() {\n  //  if (!this.isAuthenticated()) return;\n  //  this.unscheduleRenewal();\n\n  //  const expiresAt = JSON.parse(window.localStorage.getItem('expires_at'));\n\n  //  const source = Observable.of(expiresAt).flatMap(expiresAt => {\n  //    const now = Date.now();\n\n  //    // Use the delay in a timer to\n  //    // run the refresh at the proper time\n  //    return Observable.timer(Math.max(1, expiresAt - now));\n  //  });\n\n  //  // Once the delay time from above is\n  //  // reached, get a new JWT and schedule\n  //  // additional refreshes\n  //  this.refreshSubscription = source.subscribe(() => {\n  //    this.renewToken();\n  //    this.scheduleRenewal();\n  //  });\n  //}\n\n  public unscheduleRenewal() {\n    if (!this.refreshSubscription) return;\n    this.refreshSubscription.unsubscribe();\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}