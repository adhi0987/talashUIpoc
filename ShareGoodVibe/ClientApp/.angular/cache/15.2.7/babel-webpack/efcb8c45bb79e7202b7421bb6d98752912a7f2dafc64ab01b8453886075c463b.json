{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  add(modal) {\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n  remove(id) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x.id !== id);\n  }\n  open(id) {\n    // open modal specified by id\n    let modal = this.modals.filter(x => x.id === id)[0];\n    modal.open();\n  }\n  close(id) {\n    // close modal specified by id\n    let modal = this.modals.filter(x => x.id === id)[0];\n    modal.close();\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,YAAY;EAHzBC;IAKY,WAAM,GAAU,EAAE;;EAE1BC,GAAG,CAACC,KAAU;IACV;IACA,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EAC3B;EAEAG,MAAM,CAACC,EAAU;IACb;IACA,IAAI,CAACH,MAAM,GAAG,IAAI,CAACA,MAAM,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EACtD;EAEAG,IAAI,CAACH,EAAU;IACX;IACA,IAAIJ,KAAK,GAAQ,IAAI,CAACC,MAAM,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC,CAAC;IACxDJ,KAAK,CAACO,IAAI,EAAE;EAChB;EAEAC,KAAK,CAACJ,EAAU;IACZ;IACA,IAAIJ,KAAK,GAAQ,IAAI,CAACC,MAAM,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC,CAAC;IACxDJ,KAAK,CAACQ,KAAK,EAAE;EACjB;;AAxBSX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAY,SAAZZ,YAAY;EAAAa,YAFX;AAAM","names":["ModalService","constructor","add","modal","modals","push","remove","id","filter","x","open","close","factory","providedIn"],"sourceRoot":"","sources":["C:\\Tal\\Analysis\\ShareGoodVibe\\Talash\\ShareGoodVibe\\ClientApp\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n\n    private modals: any[] = [];\n\n    add(modal: any) {\n        // add modal to array of active modals\n        this.modals.push(modal);\n    }\n\n    remove(id: string) {\n        // remove modal from array of active modals\n        this.modals = this.modals.filter(x => x.id !== id);\n    }\n\n    open(id: string) {\n        // open modal specified by id\n        let modal: any = this.modals.filter(x => x.id === id)[0];\n        modal.open();\n    }\n\n    close(id: string) {\n        // close modal specified by id\n        let modal: any = this.modals.filter(x => x.id === id)[0];\n        modal.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}